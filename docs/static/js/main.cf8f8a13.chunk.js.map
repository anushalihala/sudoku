{"version":3,"sources":["context/SudokuContext.tsx","components/Mode.tsx","components/layout/Header.tsx","components/layout/GameSection.tsx","components/Timer.tsx","components/Numbers.tsx","components/Action.tsx","components/layout/StatusSection.tsx","components/layout/Footer.tsx","solver/BlankSudoku.tsx","solver/sudokuSolver.js","Game.tsx","App.tsx","index.tsx"],"names":["SudokuContext","createContext","numberSelected","setNumberSelected","gameArray","setGameArray","difficulty","setDifficulty","timeGameStarted","moment","setTimeGameStarted","fastMode","setFastMode","cellSelected","setCellSelected","initArray","setInitArray","won","setWon","obtainedSolution","setObtainedSolution","lockMode","setLockMode","SudokuProvider","children","useState","Provider","value","useSudokuContext","useContext","Mode","props","sudokuContext","isDisabled","mode","style","pointerEvents","opacity","className","type","onClick","onClickMode","Header","onClickLockMode","GameSection","rows","_isCellSameAsSelectedCell","row","column","_selectedCell","indexOfArray","highlight","_unselectedCell","map","Timer","Numbers","onClickNumber","number","toString","Svg","action","height","viewBox","width","xmlns","d","fill","version","id","x","y","Action","onClickAction","StatusSection","onClickSolve","onClickUndo","onClickErase","onClickHint","onClickMistakesMode","onClickFastMode","Footer","href","nullArray","solve","board","i","j","solved","searchForSolution","boards","res","length","validBoard","push","keepOnlyValid","firstEmpty","findEmptySquare","undefined","newBoard","nextBoards","tryPath","shift","cur","includes","rowsGood","columnsGood","boxCoordinates","coordinates","boxesGood","Game","mistakesMode","setMistakesMode","history","setHistory","solvedArray","setSolvedArray","overlay","setOverlay","_createNewGame","e","temporaryInitArray","_fillCell","index","console","log","tempInitArray","slice","tempGameArray","tempArray","tempHistory","every","cell","cellIndex","_isSolved","_userFillCell","solverArray","solverArrayRow","counter","cellNumber","parseInt","cellValue","sudokuResult","flat","item","String","useEffect","onClickCell","pop","solution","App","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf8f8a13.chunk.js","sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\nimport moment from 'moment';\r\n\r\ntype SudokuContextProps = {\r\n  numberSelected: string,\r\n  setNumberSelected: React.Dispatch<React.SetStateAction<string>>,\r\n  gameArray: string[],\r\n  setGameArray: React.Dispatch<React.SetStateAction<string[]>>,\r\n  difficulty: string,\r\n  setDifficulty: React.Dispatch<React.SetStateAction<string>>,\r\n  timeGameStarted: moment.Moment,\r\n  setTimeGameStarted: React.Dispatch<React.SetStateAction<moment.Moment>>,\r\n  fastMode: boolean,\r\n  setFastMode: React.Dispatch<React.SetStateAction<boolean>>,\r\n  cellSelected: number,\r\n  setCellSelected: React.Dispatch<React.SetStateAction<number>>,\r\n  initArray: string[],\r\n  setInitArray: React.Dispatch<React.SetStateAction<string[]>>,\r\n  won: boolean,\r\n  setWon: React.Dispatch<React.SetStateAction<boolean>>,\r\n  obtainedSolution: boolean,\r\n  setObtainedSolution: React.Dispatch<React.SetStateAction<boolean>>,\r\n  lockMode: boolean,\r\n  setLockMode: React.Dispatch<React.SetStateAction<boolean>>,\r\n};\r\n\r\n\r\nconst SudokuContext = createContext<SudokuContextProps>({ numberSelected: '0', setNumberSelected: () => {},\r\n                                                          gameArray: [], setGameArray: () => {},\r\n                                                          difficulty: 'Easy', setDifficulty: () => {},\r\n                                                          timeGameStarted: moment(), setTimeGameStarted: () => {},\r\n                                                          fastMode: false, setFastMode: () => {},\r\n                                                          cellSelected: -1, setCellSelected: () => {},\r\n                                                          initArray: [], setInitArray: () => {},\r\n                                                          won: false, setWon: () => {},\r\n                                                          obtainedSolution: false, setObtainedSolution: () => {},\r\n                                                          lockMode:false, setLockMode: () => {} });\r\n\r\ntype SudokuProviderProps = {\r\n  children: React.ReactElement\r\n};\r\n\r\nexport const SudokuProvider = ({ children }: SudokuProviderProps) => {\r\n  let [ numberSelected, setNumberSelected ] = useState<string>('0');\r\n  let [ gameArray, setGameArray ] = useState<string[]>([]);\r\n  let [ difficulty,setDifficulty ] = useState<string>('Easy');\r\n  let [ timeGameStarted, setTimeGameStarted ] = useState<moment.Moment>(moment());\r\n  let [ fastMode, setFastMode ] = useState<boolean>(false);\r\n  let [ cellSelected, setCellSelected ] = useState<number>(-1);\r\n  let [ initArray, setInitArray ] = useState<string[]>([]);\r\n  let [ won, setWon ] = useState<boolean>(false);\r\n  let [ obtainedSolution, setObtainedSolution ] = useState<boolean>(false);\r\n  let [ lockMode, setLockMode ] = useState<boolean>(false)\r\n\r\n  return (\r\n    <SudokuContext.Provider value={\r\n      {\r\n        numberSelected, setNumberSelected,\r\n        gameArray, setGameArray,\r\n        difficulty,setDifficulty,\r\n        timeGameStarted, setTimeGameStarted,\r\n        fastMode, setFastMode,\r\n        cellSelected, setCellSelected,\r\n        initArray, setInitArray,\r\n        won, setWon,\r\n        obtainedSolution, setObtainedSolution,\r\n        lockMode, setLockMode\r\n      }\r\n    }>\r\n      {children}\r\n    </SudokuContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useSudokuContext = (): SudokuContextProps => useContext(SudokuContext);\r\n\r\n// Usage\r\n// const { numberSelected, setNumberSelected } = useNumberValue();\r\n","import React from 'react';\r\nimport { useSudokuContext } from '../context/SudokuContext';\r\n\r\ntype ModeProps = {\r\n  mode: string,\r\n  onClickMode: () => void\r\n};\r\n\r\n/**\r\n * React component for the Mistakes Mode / Fast Mode\r\n * elements in the Status Section.\r\n */\r\nexport const Mode = (props: ModeProps) => {\r\n  const sudokuContext = useSudokuContext();\r\n  let isDisabled = props.mode == \"mistakes\" && !sudokuContext.obtainedSolution\r\n  return (\r\n    <div style={isDisabled ? {pointerEvents: \"none\", opacity: \"0.4\"} : {}} className={ props.mode === 'mistakes'\r\n                      ? \"status__action-mistakes-mode\"\r\n                      : props.mode === 'fast' \r\n                      ? \"status__action-fast-mode\"\r\n                      : \"status__action-lock-mode\"}>\r\n      <label className={ props.mode === 'mistakes'\r\n                          ? \"status__action-mistakes-mode-switch\"\r\n                          : props.mode === 'fast' \r\n                          ? \"status__action-fast-mode-switch\"\r\n                          : \"status__action-lock-mode-switch\"}>\r\n        <input type=\"checkbox\" />\r\n        <span className={ props.mode === 'mistakes'\r\n                            ? \"status__action-mistakes-mode-slider\"\r\n                            : props.mode === 'fast' \r\n                            ? \"status__action-fast-mode-slider\"\r\n                            : \"status__action-lock-mode-slider\" }\r\n              onClick={props.onClickMode}\r\n        ></span>\r\n      </label>\r\n      <p className=\"status__action-text\">{ props.mode === 'mistakes'\r\n                  ? 'Mistakes Mode'\r\n                  : props.mode === 'fast' \r\n                  ? 'Fast Mode'\r\n                  : 'Lock' }</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Mode } from '../Mode'\r\n\r\ntype HeaderProps = {\r\n  onClick: () => void;\r\n  onClickLockMode: () => void;\r\n};\r\n\r\n/**\r\n * React component for the Header Section.\r\n */\r\nexport const Header = (props: HeaderProps) => {\r\n  return (\r\n    <header className=\"header\">\r\n      <h1>\r\n        Su<span className=\"header__group-one\">do</span><span className=\"header__group-two\">ku</span>\r\n      </h1>\r\n      <h2 onClick={props.onClick}>\r\n        New Game\r\n      </h2>\r\n      <Mode mode='lock' onClickMode={props.onClickLockMode}></Mode>\r\n    </header>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useSudokuContext } from '../../context/SudokuContext';\r\n\r\ntype GameSectionProps = {\r\n  onClick: (indexOfArray: number) => void\r\n};\r\n\r\n/**\r\n * React component for the Game Section\r\n */\r\nexport const GameSection = (props: GameSectionProps) => {\r\n  const rows = [0,1,2,3,4,5,6,7,8];\r\n  let { numberSelected,\r\n        gameArray,\r\n        fastMode,\r\n        cellSelected,\r\n        initArray } = useSudokuContext();\r\n\r\n  /**\r\n   * Cell Highlight Method 1: Highlight all cells\r\n   * related to current cell. By related, I mean all\r\n   * cells in the same row/column/box as the current cell.\r\n   */\r\n  // eslint-disable-next-line\r\n  function _isCellRelatedToSelectedCell(row: number, column: number) {\r\n    if (cellSelected === row * 9 + column) {\r\n      return true;\r\n    }\r\n    let rowOfSelectedCell = Math.floor(cellSelected / 9);\r\n    let columnOfSelectedCell = cellSelected % 9;\r\n    if (rowOfSelectedCell === row || columnOfSelectedCell === column) {\r\n      return true;\r\n    }\r\n    return [  [0,3,0,3],\r\n              [0,3,3,6],\r\n              [0,3,6,9],\r\n              [3,6,0,3],\r\n              [3,6,3,6],\r\n              [3,6,6,9],\r\n              [6,9,0,3],\r\n              [6,9,3,6],\r\n              [6,9,6,9]\r\n            ].some((array) => {\r\n              if (rowOfSelectedCell > array[0]-1 && row > array[0]-1 &&\r\n                  rowOfSelectedCell < array[1] && row < array[1] &&\r\n                  columnOfSelectedCell > array[2]-1 && column > array[2]-1 &&\r\n                  columnOfSelectedCell < array[3] && column < array[3])\r\n                  return true;\r\n              return false;\r\n            });\r\n  }\r\n\r\n  /**\r\n   * Cell Highlight Method 2: Highlight all cells with\r\n   * the same number as in the current cell.\r\n   */\r\n  function _isCellSameAsSelectedCell(row: number, column: number) {\r\n    if (fastMode) {\r\n      if (numberSelected === gameArray[row * 9 + column]) {\r\n        return true;\r\n      }\r\n      return false;\r\n    } else {\r\n      if (cellSelected === row * 9 + column) {\r\n        return true;\r\n      }\r\n      if (gameArray[cellSelected] === '0') {\r\n        return false;\r\n      }\r\n      if (gameArray[cellSelected] === gameArray[row * 9 + column]) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the classes for a cell related to the selected cell.\r\n   */\r\n  function _selectedCell(indexOfArray: number, value: string, highlight: string) {\r\n    if (value !== '0') {\r\n      if (initArray[indexOfArray] === '0') {\r\n        return (\r\n          <td className={`game__cell game__cell--userfilled game__cell--${highlight}selected`} key={indexOfArray} onClick={() => props.onClick(indexOfArray)}>{value}</td>\r\n        )\r\n      } else {\r\n        return (\r\n          <td className={`game__cell game__cell--filled game__cell--${highlight}selected`} key={indexOfArray} onClick={() => props.onClick(indexOfArray)}>{value}</td>\r\n        )\r\n      }\r\n    } else {\r\n      return (\r\n        <td className={`game__cell game__cell--${highlight}selected`} key={indexOfArray} onClick={() => props.onClick(indexOfArray)}>{value}</td>\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns the classes or a cell not related to the selected cell.\r\n   */\r\n  function _unselectedCell(indexOfArray: number, value: string) {\r\n    if (value !== '0') {\r\n      if (initArray[indexOfArray] === '0') {\r\n        return (\r\n          <td className=\"game__cell game__cell--userfilled\" key={indexOfArray} onClick={() => props.onClick(indexOfArray)}>{value}</td>\r\n        )\r\n      } else {\r\n        return (\r\n          <td className=\"game__cell game__cell--filled\" key={indexOfArray} onClick={() => props.onClick(indexOfArray)}>{value}</td>\r\n        )\r\n      }\r\n    } else {\r\n      return (\r\n        <td className=\"game__cell\" key={indexOfArray} onClick={() => props.onClick(indexOfArray)}>{value}</td>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section className=\"game\">\r\n      <table className=\"game__board\">\r\n        <tbody>\r\n          {\r\n            rows.map((row) => {\r\n              return (\r\n                <tr className=\"game__row\" key={row}>\r\n                  {\r\n                    rows.map((column) => {\r\n                      const indexOfArray = row * 9 + column;\r\n                      const value = gameArray[indexOfArray];\r\n\r\n                      if (cellSelected === indexOfArray) {\r\n                        return _selectedCell(indexOfArray, value, 'highlight');\r\n                      }\r\n\r\n                      if (fastMode) {\r\n                        if (numberSelected !== '0' && _isCellSameAsSelectedCell(row, column)) {\r\n                          return _selectedCell(indexOfArray, value, '');\r\n                        } else {\r\n                          return _unselectedCell(indexOfArray, value);\r\n                        }\r\n                      } else {\r\n                        if (cellSelected !== -1 && _isCellSameAsSelectedCell(row, column)) {\r\n                          return _selectedCell(indexOfArray, value, '');\r\n                        } else {\r\n                          return _unselectedCell(indexOfArray, value);\r\n                        }\r\n                      }\r\n                    })\r\n                  }\r\n                </tr>\r\n              )\r\n            })\r\n          }\r\n        </tbody>\r\n      </table>\r\n    </section>\r\n  )\r\n}\r\n","// import React, { useState, useEffect } from 'react';\r\nimport { useSudokuContext } from '../context/SudokuContext';\r\n// import moment from 'moment';\r\n\r\n/**\r\n * React component for the Timer in Status Section.\r\n * Uses the 'useEffect' hook to update the timer every minute.\r\n */\r\nexport const Timer = () => {\r\n  // let [currentTime, setCurrentTime] = useState(moment());\r\n  // let { timeGameStarted, won } = useSudokuContext();\r\n\r\n  // useEffect(() => {\r\n  //   if (!won)\r\n  //     setTimeout(() => tick(), 1000);\r\n  // });\r\n\r\n  // function tick() {\r\n  //   setCurrentTime(moment());\r\n  // }\r\n\r\n  /* function getTimer() {\r\n    let secondsTotal = currentTime.diff(timeGameStarted, 'seconds');\r\n    if (secondsTotal <= 0)\r\n      return '00:00';\r\n    let duration = moment.duration(secondsTotal, 'seconds');\r\n    let hours = duration.hours();\r\n    let minutes = duration.minutes();\r\n    let seconds = duration.seconds();\r\n    let stringTimer = '';\r\n\r\n    stringTimer += hours ? '' + hours + ':' : '';\r\n    stringTimer += minutes ? (minutes < 10 ? '0' : '') + minutes + ':' : '00:';\r\n    stringTimer += seconds < 10 ? '0' + seconds : seconds;\r\n\r\n    return stringTimer;\r\n  } */\r\n\r\n  const sudokuContext = useSudokuContext();\r\n  let isDisabled = !sudokuContext.obtainedSolution\r\n  const stringTimer = \"--:--\"\r\n\r\n  return (\r\n    <div style={isDisabled ? {pointerEvents: \"none\", opacity: \"0.4\"} : {}}  className=\"status__time\">{stringTimer}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useSudokuContext } from '../context/SudokuContext';\r\n\r\ntype NumbersProps = {\r\n  onClickNumber: (number: string) => void\r\n};\r\n\r\n/**\r\n * React component for the Number Selector in the Status Section.\r\n */\r\nexport const Numbers = ({ onClickNumber } : NumbersProps) => {\r\n  let { numberSelected } = useSudokuContext();\r\n\r\n  return (\r\n    <div className=\"status__numbers\">\r\n      {\r\n        [1,2,3,4,5,6,7,8,9].map((number) => {\r\n          if (numberSelected === number.toString()) {\r\n            return (\r\n              <div className=\"status__number status__number--selected\" key={number} onClick={() => onClickNumber(number.toString())}>{number}</div>\r\n            )\r\n          } else {\r\n            return (\r\n              <div className=\"status__number\" key={number} onClick={() => onClickNumber(number.toString())}>{number}</div>\r\n            )\r\n          }\r\n        })\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { useSudokuContext } from \"../context/SudokuContext\"\r\n\r\ntype ActionProps = {\r\n  action: string,\r\n  onClickAction: () => void\r\n};\r\n\r\ntype SvgProps = {\r\n  action: string\r\n};\r\n\r\n/**\r\n * Return the SVGs of the Action buttons in the Status Section.\r\n */\r\nconst Svg = (props: SvgProps) => {\r\n  if (props.action === 'undo') {\r\n    return (\r\n      <svg className=\"status__action-svg\" height=\"512pt\" viewBox=\"0 0 512 512\" width=\"512pt\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m154.667969 213.332031h-138.667969c-8.832031 0-16-7.167969-16-16v-138.664062c0-8.832031 7.167969-16 16-16s16 7.167969 16 16v122.664062h122.667969c8.832031 0 16 7.167969 16 16s-7.167969 16-16 16zm0 0\" fill=\"hsl(213, 30%, 59%)\"/><path d=\"m256 512c-68.351562 0-132.628906-26.644531-180.96875-75.03125-6.253906-6.25-6.253906-16.382812 0-22.632812 6.269531-6.273438 16.402344-6.230469 22.632812 0 42.304688 42.347656 98.515626 65.664062 158.335938 65.664062 123.519531 0 224-100.480469 224-224s-100.480469-224-224-224c-105.855469 0-200.257812 71.148438-224.449219 169.171875-2.132812 8.597656-10.75 13.824219-19.371093 11.714844-8.574219-2.132813-13.800782-10.796875-11.710938-19.371094 27.691406-112.148437 135.148438-193.515625 255.53125-193.515625 141.164062 0 256 114.835938 256 256s-114.835938 256-256 256zm0 0\" fill=\"hsl(213, 30%, 59%)\"/></svg>\r\n    )\r\n  } else if (props.action === 'erase') {\r\n    return (\r\n      <svg className=\"status__action-svg\" version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 512.001 512.001\"><path d=\"M505.922,476.567L285.355,256L505.92,35.435c8.106-8.105,8.106-21.248,0-29.354c-8.105-8.106-21.248-8.106-29.354,0L256.001,226.646L35.434,6.081c-8.105-8.106-21.248-8.106-29.354,0c-8.106,8.105-8.106,21.248,0,29.354L226.646,256L6.08,476.567c-8.106,8.106-8.106,21.248,0,29.354c8.105,8.105,21.248,8.106,29.354,0l220.567-220.567l220.567,220.567c8.105,8.105,21.248,8.106,29.354,0S514.028,484.673,505.922,476.567z\" fill=\"hsl(213, 30%, 59%)\"/></svg>\r\n    )\r\n  } else if (props.action === 'hint') {\r\n    return (\r\n      <svg className=\"status__action-svg\" version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 432.4 432.4\">\r\n        <path d=\"M216.529,93.2c-61.2,0-111.2,50-111.2,111.2c0,32,14,62.8,37.6,83.6c17.6,17.6,16,55.2,15.6,55.6c0,2,0.4,3.6,2,5.2c1.2,1.2,3.2,2,4.8,2h102c2,0,3.6-0.8,4.8-2c1.2-1.2,2-3.2,2-5.2c0-0.4-2-38,15.6-55.6c0.4-0.4,0.8-0.8,1.2-1.2c23.2-21.2,36.8-51.2,36.8-82.4C327.729,143.2,277.729,93.2,216.529,93.2zM280.529,277.6c-0.4,0.4-1.2,1.2-1.2,1.6c-15.6,16.8-18.4,44.4-18.8,57.6h-88.4c-0.4-13.2-3.2-42-20-59.2c-21.2-18.4-33.6-45.2-33.6-73.6c0-54,43.6-97.6,97.6-97.6s97.6,43.6,97.6,97.6C313.729,232.4,301.729,259.2,280.529,277.6z\" fill=\"hsl(213, 30%, 59%)\"/>\r\n        <path d=\"M216.129,121.6c-3.6,0-6.8,3.2-6.8,6.8c0,3.6,3.2,6.8,6.8,6.8c40.4,0,72.8,32.8,72.8,72.8c0,3.6,3.2,6.8,6.8,6.8c3.6,0,6.8-3.2,6.8-6.8C302.929,160.4,264.129,121.6,216.129,121.6z\" fill=\"hsl(213, 30%, 59%)\"/>\r\n        <path d=\"M260.529,358.4h-88.8c-9.2,0-16.8,7.6-16.8,16.8s7.6,16.8,16.8,16.8h88.4c9.6-0.4,17.2-7.6,17.2-16.8C277.329,366,269.729,358.4,260.529,358.4zM260.529,378h-88.8c-1.6,0-3.2-1.2-3.2-3.2s1.2-3.2,3.2-3.2h88.4c1.6,0,3.2,1.2,3.2,3.2S262.129,378,260.529,378z\" fill=\"hsl(213, 30%, 59%)\"/>\r\n        <path d=\"M247.329,398.8h-62.4c-9.2,0-16.8,7.6-16.8,16.8s7.6,16.8,16.8,16.8h62.4c9.2,0,16.8-7.6,16.8-16.8C264.129,406,256.529,398.8,247.329,398.8zM247.329,418.4h-62.4c-1.6,0-3.2-1.2-3.2-3.2s1.2-3.2,3.2-3.2h62.4c1.6,0,3.2,1.2,3.2,3.2S248.929,418.4,247.329,418.4z\" fill=\"hsl(213, 30%, 59%)\"/>\r\n        <path d=\"M216.129,60c4,0,6.8-3.2,6.8-6.8V6.8c0-3.6-3.2-6.8-6.8-6.8c-3.6,0-6.8,3.2-6.8,6.8v46.4C209.329,56.8,212.529,60,216.129,60z\" fill=\"hsl(213, 30%, 59%)\"/>\r\n        <path d=\"M329.329,34.4c-3.2-2.4-7.2-1.2-9.2,1.6l-25.6,38.4c-2.4,3.2-1.6,7.6,1.6,9.6c1.2,0.8,2.4,1.2,3.6,1.2c2.4,0,4.4-1.2,5.6-3.2l25.6-38.4C333.329,40.8,332.529,36.4,329.329,34.4z\" fill=\"hsl(213, 30%, 59%)\"/>\r\n        <path d=\"M134.929,83.6c1.2,0,2.4-0.4,3.6-1.2c3.2-2,4-6.4,2-9.6l-24.8-38.8c-2-3.2-6.4-4-9.6-2s-4,6.4-2,9.6l24.8,38.8C130.529,82.8,132.529,83.6,134.929,83.6z\" fill=\"hsl(213, 30%, 59%)\"/>\r\n        <path d=\"M86.529,126l-40.4-22c-3.2-1.6-7.6-0.4-9.2,2.8c-2,3.2-0.8,7.6,2.8,9.2l40.4,22c1.2,0.4,2,0.8,3.2,0.8c2.4,0,4.8-1.2,6-3.6C90.929,132,89.729,127.6,86.529,126z\" fill=\"hsl(213, 30%, 59%)\"/>\r\n        <path d=\"M395.729,106.8c-1.6-3.2-6-4.4-9.2-2.8l-40.8,22c-3.2,1.6-4.4,6-2.8,9.2c1.2,2.4,3.6,3.6,6,3.6c1.2,0,2.4-0.4,3.2-0.8l40.8-22C396.129,114.4,397.329,110,395.729,106.8z\" fill=\"hsl(213, 30%, 59%)\"/>\r\n      </svg>\r\n    )\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * React component for the Action buttons in the Status Section.\r\n */\r\nexport const Action = (props: ActionProps) => {\r\n  const sudokuContext = useSudokuContext();\r\n  let isDisabled = props.action == \"hint\" && !sudokuContext.obtainedSolution\r\n  // console.log(\"Is disabled?\", isDisabled) //logs for testing\r\n  return (\r\n    <div style={isDisabled ? {pointerEvents: \"none\", opacity: \"0.4\"} : {}} className={  props.action === 'undo'\r\n                      ? \"status__action-undo\"\r\n                      : props.action === 'erase'\r\n                      ? \"status__action-erase\"\r\n                      : props.action === 'hint'\r\n                      ? \"status__action-hint\"\r\n                      : \"\"\r\n                    } onClick={props.onClickAction} >\r\n      <Svg action={props.action} />\r\n      <p className=\"status__action-text\">\r\n        {\r\n          props.action === 'undo'\r\n            ? 'Undo'\r\n            : props.action === 'erase'\r\n            ? 'Erase'\r\n            : props.action === 'hint'\r\n            ? 'Hint'\r\n            : ''\r\n        }</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { Timer } from '../Timer';\r\nimport { Numbers } from '../Numbers';\r\nimport { Action } from '../Action';\r\nimport { Mode } from '../Mode';\r\nimport { useSudokuContext } from '../../context/SudokuContext';\r\n\r\ntype StatusSectionProps = {\r\n  onClickNumber: (number: string) => void,\r\n  onClickUndo: () => void,\r\n  onClickErase: () => void,\r\n  onClickHint: () => void,\r\n  onClickMistakesMode: () => void,\r\n  onClickFastMode: () => void,\r\n  onClickSolve: () => void\r\n};\r\n\r\n/**\r\n * React component for the Status Section.\r\n */\r\nexport const StatusSection = (props: StatusSectionProps) => {\r\n  let sudokuContext = useSudokuContext()\r\n  let obtainedSolution = sudokuContext.obtainedSolution\r\n\r\n  return (\r\n    <section className=\"status\">\r\n      <button className=\"solve\" onClick={props.onClickSolve}>\r\n        {obtainedSolution ? \"Fill\" : \"Solve\"}\r\n      </button> \r\n      <Timer />\r\n      <Numbers onClickNumber={(number) => props.onClickNumber(number)} />\r\n      <div className=\"status__actions\">\r\n        <Action action='undo' onClickAction={props.onClickUndo} />\r\n        <Action action='erase' onClickAction={props.onClickErase} />\r\n        <Action action='hint' onClickAction={props.onClickHint} />\r\n        <Mode mode='mistakes' onClickMode={props.onClickMistakesMode} />\r\n        <Mode mode='fast' onClickMode={props.onClickFastMode} />\r\n      </div>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\n/**\r\n * React component for the Footer Section.\r\n */\r\nexport const Footer = () => {\r\n  return (\r\n    <footer className=\"footer\">\r\n      <p>&#169; 2020 Amith Raravi - source code on <a href=\"https://github.com/raravi/sudoku\">Github</a></p>\r\n    </footer>\r\n  )\r\n}\r\n","let nullArray = [ '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0',\r\n                  '0', '0', '0', '0', '0', '0', '0', '0', '0' ];\r\n\r\nexport const getBlankSudoku = () => {\r\n    return nullArray\r\n}\r\n","/*\r\nCredits: https://github.com/JackHeTech/Sudoku-Solver\r\n*/\r\n\r\n// // ____DATA DEFINITIONS____ // //\r\n\r\n// Board is List[List[Int]] or false\r\n// interp. as a sudoku board, or false if the given board is invalid\r\n// EXAMPLE BOARDS\r\n\r\nconst b = null\r\n\r\nvar bd1 = [ [1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n            [1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n            [1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n            [1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n            [1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n            [1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n            [1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n            [1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n            [1, 2, 3, 4, 5, 6, 7, 8, 9]]\r\n\r\n\r\nvar bd2 = [ [b, b, b, b, b, b, b, b, b],\r\n            [b, b, b, b, b, b, b, b, b],\r\n            [b, b, b, b, b, b, b, b, b],\r\n            [b, b, b, b, b, b, b, b, b],\r\n            [b, b, b, b, b, b, b, b, b],\r\n            [b, b, b, b, b, b, b, b, b],\r\n            [b, b, b, b, b, b, b, b, b],\r\n            [b, b, b, b, b, b, b, b, b],\r\n            [b, b, b, b, b, b, b, b, b]]\r\n\r\n\r\nvar bd3 = [ [b, b, b, b, b, 8, 9, 1, b],\r\n            [b, b, 1, b, b, b, b, b, 3],\r\n            [9, b, b, b, 2, 7, b, b, 5],\r\n            [3, b, 2, 5, 6, b, b, b, b],\r\n            [5, b, b, b, b, b, b, b, 8],\r\n            [b, b, b, b, 8, 3, 5, b, 4],\r\n            [8, b, b, 7, 4, b, b, b, 2],\r\n            [6, b, b, b, b, b, 1, b, b],\r\n            [b, 5, 7, 3, b, b, b, b, b]]\r\n\r\n\r\nvar bd4 = [ [1, 2, 3, 4, 5, 6, 7, 8, b],\r\n            [b, b, b, b, b, b, b, b, 2],\r\n            [b, b, b, b, b, b, b, b, 3],\r\n            [b, b, b, b, b, b, b, b, 4],\r\n            [b, b, b, b, b, b, b, b, 5],\r\n            [b, b, b, b, b, b, b, b, 6],\r\n            [b, b, b, b, b, b, b, b, 7],\r\n            [b, b, b, b, b, b, b, b, 8],\r\n            [b, b, b, b, b, b, b, b, 9]]\r\n\r\n\r\n\r\n\r\n// // ____FUNCTION DEFINITIONS____ // //\r\n\r\nfunction initiate() {\r\n    // null -> null\r\n    // populate the board with whatever the user inputted\r\n    var startingBoard = [[]]\r\n    var j = 0\r\n    for (var i = 1; i <= 81; i++){\r\n        const val = document.getElementById(String(i)).value\r\n        if (val == \"\"){\r\n            startingBoard[j].push(null)\r\n        }\r\n        else { \r\n            startingBoard[j].push(Number(val))\r\n        }\r\n        if (i % 9 == 0 && i < 81){\r\n            startingBoard.push([])\r\n            j++\r\n        }\r\n    }\r\n    // console.log(startingBoard)\r\n    const inputValid = validBoard(startingBoard)\r\n    if (!inputValid){\r\n        inputIsInvalid()\r\n    }\r\n    else{\r\n        const answer = solve(startingBoard)\r\n        updateBoard(answer, inputValid)\r\n    }\r\n}\r\n\r\nfunction solve(board) {\r\n    // THIS FUNCTION WORKS.\r\n    // Board -> Board\r\n    // solves the given sudoku board\r\n    // ASSUME the given sudoku board is valid\r\n    if (solved(board)) {\r\n        return board\r\n    }\r\n    else {\r\n        const possibilities = nextBoards(board)\r\n        const validBoards = keepOnlyValid(possibilities)\r\n        return searchForSolution(validBoards)\r\n    }\r\n}\r\n\r\n// ______TESTS______ //\r\n// console.log(solve(bd4))\r\n// ______TESTS______ //\r\n\r\n\r\nfunction searchForSolution(boards){\r\n    // List[Board] -> Board or false\r\n    // finds a valid solution to the sudoku problem\r\n    if (boards.length < 1){\r\n        return false\r\n    }\r\n    else {\r\n        // backtracking search for solution\r\n        var first = boards.shift()\r\n        const tryPath = solve(first)\r\n        if (tryPath != false){\r\n            return tryPath\r\n        }\r\n        else{\r\n            return searchForSolution(boards)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction solved(board){\r\n    // THIS FUNCTION WORKS.\r\n    // Board -> Boolean\r\n    // checks to see if the given puzzle is solved\r\n    for (var i = 0; i < 9; i++){\r\n        for (var j = 0; j < 9; j++){\r\n            if (board[i][j] == null){\r\n                return false\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\n// ______TESTS______ //\r\n// console.log(solved(bd3))\r\n// ______TESTS______ //\r\n\r\n\r\nfunction nextBoards(board){ \r\n    // THIS FUNCTION WORKS.\r\n    // Board -> List[Board]\r\n    // finds the first emply square and generates 9 different boards filling in that square with numbers 1...9\r\n    var res = []\r\n    const firstEmpty = findEmptySquare(board)\r\n    if (firstEmpty != undefined){\r\n        const y = firstEmpty[0]\r\n        const x = firstEmpty[1]\r\n        for (var i = 1; i <= 9; i++){\r\n            var newBoard = [...board]\r\n            var row = [...newBoard[y]]\r\n            row[x] = i\r\n            newBoard[y] = row\r\n            res.push(newBoard)\r\n        }\r\n    }\r\n    return res\r\n}\r\n\r\nfunction findEmptySquare(board){\r\n    // THIS FUNCTION WORKS.\r\n    // Board -> [Int, Int] \r\n    // (get the i j coordinates for the first empty square)\r\n    for (var i = 0; i < 9; i++){\r\n        for (var j = 0; j < 9; j++){\r\n            if (board[i][j] == null) {\r\n                return [i, j]\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// ______TESTS______ //\r\n// console.log(nextBoards(bd3))\r\n// console.log(findEmptySquare(bd3))\r\n// ______TESTS______ //\r\n\r\nfunction keepOnlyValid(boards){\r\n    // THIS FUNCTION WORKS.\r\n    // List[Board] -> List[Board]\r\n    // filters out all of the invalid boards from the list\r\n    var res = []\r\n    for (var i = 0; i < boards.length; i++){\r\n        if (validBoard(boards[i])){\r\n            res.push(boards[i])\r\n        }\r\n    }\r\n    return res\r\n}\r\n\r\n// ______TESTS______ //\r\n// console.log(keepOnlyValid([bd1, bd2, bd3]))\r\n// ______TESTS______ //\r\n\r\n\r\nfunction validBoard(board){\r\n    // THIS FUNCTION WORKS.\r\n    // Board -> Boolean\r\n    // checks to see if given board is valid\r\n    return rowsGood(board) && columnsGood(board) && boxesGood(board)\r\n}\r\n\r\nfunction rowsGood(board){\r\n    // THIS FUNCTION WORKS.\r\n    // Board -> Boolean\r\n    // makes sure there are no repeating numbers for each row\r\n    for (var i = 0; i < 9; i++){\r\n        var cur = []\r\n        for (var j = 0; j < 9; j++){\r\n            if (cur.includes(board[i][j])){\r\n                return false\r\n            }\r\n            else if (board[i][j] != null){\r\n                cur.push(board[i][j])\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction columnsGood(board){\r\n    // THIS FUNCTION WORKS.\r\n    // Board -> Boolean\r\n    // makes sure there are no repeating numbers for each column\r\n    for (var i = 0; i < 9; i++){\r\n        var cur = []\r\n        for (var j = 0; j < 9; j++){\r\n            if (cur.includes(board[j][i])){\r\n                return false\r\n            }\r\n            else if (board[j][i] != null){\r\n                cur.push(board[j][i])\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\n\r\nfunction boxesGood(board){\r\n    // transform this everywhere to update res\r\n    const boxCoordinates = [[0, 0], [0, 1], [0, 2],\r\n                            [1, 0], [1, 1], [1, 2],\r\n                            [2, 0], [2, 1], [2, 2]]\r\n    // THIS FUNCTION WORKS.\r\n    // Board -> Boolean\r\n    // makes sure there are no repeating numbers for each box\r\n    for (var y = 0; y < 9; y += 3){\r\n        for (var x = 0; x < 9; x += 3){\r\n            // each traversal should examine each box\r\n            var cur = []\r\n            for (var i = 0; i < 9; i++){\r\n                var coordinates = [...boxCoordinates[i]]\r\n                coordinates[0] += y\r\n                coordinates[1] += x\r\n                if (cur.includes(board[coordinates[0]][coordinates[1]])){\r\n                    return false\r\n                }\r\n                else if (board[coordinates[0]][coordinates[1]] != null){\r\n                    cur.push(board[coordinates[0]][coordinates[1]])\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\n// ______TESTS______ //\r\n// console.log(\"Rows:\")\r\n// console.log(rowsGood(bd1))\r\n// console.log(rowsGood(bd2))\r\n// console.log(rowsGood(bd3))\r\n// console.log(\"Columns:\")\r\n// console.log(columnsGood(bd1))\r\n// console.log(columnsGood(bd2))\r\n// console.log(columnsGood(bd3))\r\n// console.log(\"Boxes:\")\r\n// console.log(boxesGood(bd1))\r\n// console.log(boxesGood(bd2))\r\n// console.log(boxesGood(bd3))\r\n// console.log(\"Valid?\")\r\n// console.log(validBoard(bd1))\r\n// console.log(validBoard(bd2))\r\n// console.log(validBoard(bd3))\r\n// ______TESTS______ //\r\n\r\n\r\nfunction updateBoard(board) {\r\n    // THIS FUNCTION WORKS.\r\n    // Board -> null\r\n    // update the DOM with the answer\r\n    if (board == false){\r\n        for (i = 1; i <= 9; i++){\r\n            document.getElementById(\"row \" + String(i)).innerHTML = \"NO SOLUTION EXISTS TO THE GIVEN BOARD\"\r\n        }\r\n    }\r\n    else{\r\n        for (var i = 1; i <= 9; i++){\r\n            var row = \"\"\r\n            for (var j = 0; j < 9; j++){\r\n                if (row == \"\"){\r\n                    row = row + String(board[i - 1][j])\r\n                }\r\n                else {\r\n                    row = row + \"\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\" + String(board[i - 1][j])\r\n                }\r\n            }\r\n            document.getElementById(\"row \" + String(i)).innerHTML = row\r\n        }\r\n    }\r\n}\r\n\r\nfunction inputIsInvalid(){\r\n    // starting board is invalid or puzzle is insolvable\r\n    for (var i = 1; i <= 9; i++){\r\n        document.getElementById(\"row \" + String(i)).innerHTML = \"THE GIVEN BOARD IS INVALID\"\r\n    }\r\n}\r\n\r\n// ans = solve(bd3)\r\n// console.log(ans)\r\nexport const sudokuSolver = (board) => {\r\n    return solve(board)\r\n} ","import React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport { Header } from './components/layout/Header';\r\nimport { GameSection } from './components/layout/GameSection';\r\nimport { StatusSection } from './components/layout/StatusSection';\r\nimport { Footer } from './components/layout/Footer';\r\nimport { getBlankSudoku } from './solver/BlankSudoku';\r\nimport { useSudokuContext } from './context/SudokuContext';\r\nimport { sudokuSolver } from './solver/sudokuSolver';\r\n\r\n/**\r\n * Game is the main React component.\r\n */\r\nexport const Game: React.FC<{}> = () => {\r\n  /**\r\n   * All the variables for holding state:\r\n   * gameArray: Holds the current state of the game.\r\n   * initArray: Holds the initial state of the game.\r\n   * solvedArray: Holds the solved position of the game.\r\n   * difficulty: Difficulty level - 'Easy', 'Medium' or 'Hard'\r\n   * numberSelected: The Number selected in the Status section.\r\n   * timeGameStarted: Time the current game was started.\r\n   * mistakesMode: Is Mistakes allowed or not?\r\n   * fastMode: Is Fast Mode enabled?\r\n   * cellSelected: If a game cell is selected by the user, holds the index.\r\n   * history: history of the current game, for 'Undo' purposes.\r\n   * overlay: Is the 'Game Solved' overlay enabled?\r\n   * won: Is the game 'won'?\r\n   */\r\n  let { numberSelected, setNumberSelected,\r\n        gameArray, setGameArray,\r\n        difficulty, setDifficulty,\r\n        setTimeGameStarted,\r\n        fastMode, setFastMode,\r\n        cellSelected, setCellSelected,\r\n        initArray, setInitArray,\r\n        setWon, \r\n        obtainedSolution, setObtainedSolution,\r\n        lockMode, setLockMode } = useSudokuContext();\r\n  let [ mistakesMode, setMistakesMode ] = useState<boolean>(false);\r\n  let [ history, setHistory ] = useState<string[][]>([]);\r\n  let [ solvedArray, setSolvedArray ] = useState<string[]>([]);\r\n  let [ overlay, setOverlay ] = useState<boolean>(false);\r\n\r\n  /**\r\n   * Creates a new game and initializes the state variables.\r\n   */\r\n  function _createNewGame(e?: React.ChangeEvent<HTMLSelectElement>) {\r\n    // let [ temporaryInitArray, temporarySolvedArray ] = getUniqueSudoku(difficulty, e);\r\n    let temporaryInitArray = getBlankSudoku()\r\n    \r\n    setInitArray(temporaryInitArray);\r\n    setGameArray(temporaryInitArray); \r\n    // setSolvedArray(temporarySolvedArray); //TODO: Set later\r\n    setNumberSelected('0');\r\n    setTimeGameStarted(moment());\r\n    setCellSelected(-1);\r\n    setHistory([]);\r\n    setWon(false);\r\n\r\n    setSolvedArray(temporaryInitArray)\r\n    setObtainedSolution(false)\r\n  }\r\n\r\n  /**\r\n   * Checks if the game is solved.\r\n   */\r\n  function _isSolved(index: number, value: string) {\r\n    if (gameArray.every((cell: string, cellIndex: number) => {\r\n          if (cellIndex === index)\r\n            return value === solvedArray[cellIndex];\r\n          else\r\n            return cell === solvedArray[cellIndex];\r\n        })) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Fills the cell with the given 'value'\r\n   * Used to Fill / Erase as required.\r\n   */\r\n  function _fillCell(index: number, value: string) {\r\n    console.log(\"lockMode\",lockMode) // test logs\r\n    if (initArray[index] === '0') {\r\n      // Direct copy results in interesting set of problems, investigate more!\r\n    \r\n      if(!lockMode){\r\n      // Can't use tempArray here, due to Side effect below!!\r\n        console.log(\"Filling gameArray | Lock mode =\", lockMode)\r\n        let tempArray = gameArray.slice();\r\n        let tempHistory = history.slice();\r\n\r\n        tempHistory.push(gameArray.slice());\r\n        setHistory(tempHistory);\r\n\r\n        tempArray[index] = value;\r\n        setGameArray(tempArray);\r\n      }\r\n      else{\r\n        console.log(\"Filling initArray | Lock mode =\", lockMode)\r\n        let tempInitArray = initArray.slice()\r\n        let tempGameArray = gameArray.slice()\r\n\r\n        tempInitArray[index] = value;\r\n        setInitArray(tempInitArray)\r\n        tempGameArray[index] = value;\r\n        setGameArray(tempGameArray)\r\n      }\r\n\r\n      if (obtainedSolution && _isSolved(index, value)) {\r\n        setOverlay(true);\r\n        setWon(true);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A 'user fill' will be passed on to the\r\n   * _fillCell function above.\r\n   */\r\n  function _userFillCell(index: number, value: string) {\r\n    if (mistakesMode && obtainedSolution) {\r\n      if (value === solvedArray[index]) {\r\n        _fillCell(index, value);\r\n      }\r\n      else {\r\n        // TODO: Flash - Mistakes not allowed in Mistakes Mode\r\n      }\r\n    } else {\r\n      _fillCell(index, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On Click of 'New Game' link,\r\n   * create a new game.\r\n   */\r\n  function onClickNewGame() {\r\n    _createNewGame();\r\n  }\r\n\r\n  /**\r\n   * On Click of a Game cell.\r\n   */\r\n  function onClickCell(indexOfArray: number) {\r\n    if (fastMode && numberSelected !== '0') {\r\n      _userFillCell(indexOfArray, numberSelected);\r\n    }\r\n    setCellSelected(indexOfArray);\r\n  }\r\n\r\n  /**\r\n   * On Change Difficulty,\r\n   * 1. Update 'Difficulty' level\r\n   * 2. Create New Game\r\n   */\r\n  // function onChangeDifficulty(e: React.ChangeEvent<HTMLSelectElement>) {\r\n  //   setDifficulty(e.target.value);\r\n  //   _createNewGame(e);\r\n  // }\r\n\r\n  /*\r\n  * Convert gameArray to different format and pass to sudokuSolver library\r\n  * Convert returned value format and set as gameArray\r\n  */\r\n  function solve() {\r\n    let solverArray = []\r\n    let solverArrayRow = []\r\n    for(var counter = 0; counter < 81; counter++){\r\n      if( counter % 9 === 0 && counter !== 0){\r\n        solverArray.push(solverArrayRow)\r\n        solverArrayRow = []\r\n      }          \r\n      let cellNumber = parseInt(gameArray[counter])\r\n      let cellValue = cellNumber === 0 ? null : cellNumber\r\n      solverArrayRow.push(cellValue)\r\n    }\r\n    solverArray.push(solverArrayRow)\r\n    // console.log(solverArray)\r\n    let sudokuResult = sudokuSolver(solverArray)\r\n    // console.log(sudokuResult)\r\n    sudokuResult = sudokuResult.flat()\r\n    sudokuResult = sudokuResult.map( (item: any) => String(item))\r\n    // console.log(sudokuResult)\r\n    return sudokuResult\r\n  }\r\n\r\n  /*\r\n  * Check whether solvedArray is completely filled\r\n  */\r\n/*   function _checkSolvedArrayFilled() {\r\n    return solvedArray.every(item => item!==\"0\")\r\n  } */\r\n\r\n  /*\r\n  * On Click of Solve button in Status section\r\n  * On first click fill\r\n  */\r\n  function onClickSolve() {\r\n    if(obtainedSolution){\r\n      setGameArray(solvedArray)\r\n    }\r\n    else{\r\n      let solution = solve()\r\n      setSolvedArray(solution)\r\n      setObtainedSolution(true)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On Click of Number in Status section,\r\n   * either fill cell or set the number.\r\n   */\r\n  function onClickNumber(number: string) {\r\n    if (fastMode) {\r\n      setNumberSelected(number)\r\n    } else if (cellSelected !== -1) {\r\n      _userFillCell(cellSelected,number);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On Click Undo,\r\n   * try to Undo the latest change.\r\n   */\r\n  function onClickUndo() {\r\n    if(history.length) {\r\n      let tempHistory = history.slice();\r\n      let tempArray = tempHistory.pop();\r\n      setHistory(tempHistory);\r\n      if (tempArray !== undefined)\r\n        setGameArray(tempArray);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On Click Erase,\r\n   * try to delete the cell.\r\n   */\r\n  function onClickErase() {\r\n    if(cellSelected !== -1 && gameArray[cellSelected] !== '0') {\r\n      _fillCell(cellSelected, '0');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * On Click Hint,\r\n   * fill the selected cell if its empty or wrong number is filled.\r\n   */\r\n  function onClickHint() {\r\n    if (cellSelected !== -1 && obtainedSolution) {\r\n      _fillCell(cellSelected, solvedArray[cellSelected]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Toggle Mistakes Mode\r\n   */\r\n  function  onClickMistakesMode() {\r\n    setMistakesMode(!mistakesMode);\r\n  }\r\n\r\n  /**\r\n   * Toggle Fast Mode\r\n   */\r\n  function onClickFastMode() {\r\n    if (fastMode) {\r\n      setNumberSelected('0');\r\n    }\r\n    setCellSelected(-1);\r\n    setFastMode(!fastMode);\r\n  }\r\n\r\n  /**\r\n   * Toggle Game Lock\r\n   */\r\n   function onClickLockMode() {\r\n    setLockMode(!lockMode)\r\n  }\r\n\r\n  /**\r\n   * Close the overlay on Click.\r\n   */\r\n  function onClickOverlay() {\r\n    setOverlay(false);\r\n    _createNewGame();\r\n  }\r\n\r\n  /**\r\n   * On load, create a New Game.\r\n   */\r\n  useEffect(() => {\r\n    _createNewGame();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className={overlay?\"container blur\":\"container\"}>\r\n        <Header onClick={onClickNewGame} onClickLockMode={onClickLockMode}/>\r\n        <div className=\"innercontainer\">\r\n          <GameSection\r\n            onClick={(indexOfArray: number) => onClickCell(indexOfArray)}\r\n          />\r\n          <StatusSection\r\n            onClickNumber={(number: string) => onClickNumber(number)}\r\n            onClickUndo={onClickUndo}\r\n            onClickErase={onClickErase}\r\n            onClickHint={onClickHint}\r\n            onClickMistakesMode={onClickMistakesMode}\r\n            onClickFastMode={onClickFastMode}\r\n            onClickSolve={onClickSolve}\r\n          />\r\n        </div>\r\n        <Footer />\r\n      </div>\r\n      <div className= { overlay\r\n                        ? \"overlay overlay--visible\"\r\n                        : \"overlay\"\r\n                      }\r\n           onClick={onClickOverlay}\r\n      >\r\n        <h2 className=\"overlay__text\">\r\n          You <span className=\"overlay__textspan1\">solved</span> <span className=\"overlay__textspan2\">it!</span>\r\n        </h2>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Game } from './Game';\r\nimport './App.css';\r\nimport { SudokuProvider } from './context/SudokuContext';\r\n\r\n/**\r\n * App is the root React component.\r\n */\r\nexport const App: React.FC<{}> = () => {\r\n  return (\r\n    <SudokuProvider>\r\n      <Game />\r\n    </SudokuProvider>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { App } from './App';\r\n\r\nrender(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}